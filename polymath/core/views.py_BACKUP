# Create your views here.
from django.shortcuts import render_to_response, get_object_or_404
from core.models import Course, Lesson
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from core.forms import CourseInfoForm, LessonInfoForm
from django.forms.formsets import formset_factory
from django.template import RequestContext
from django.http import HttpResponseRedirect
import ipdb 

def view_course(request, course_id):
    requested_course = get_object_or_404(Course, id=course_id)

    lesson_list = requested_course.lesson_set.all()
    creator = requested_course.creator.user

    return render_to_response('view_course.dtl',  {
   	'requested_course': requested_course,
	'lessons': lesson_list,
    'creator': creator
    },
    context_instance=RequestContext(request))

def view_profile(request, uname):
    profile_owner = get_object_or_404(User, username=uname)    
    userp = profile_owner.get_profile()

    user_blurb = userp.blurb
    courses_created_by_user = userp.courses_created.all()
    
    return render_to_response('view_profile.dtl', {
    'blurb': user_blurb,
    'courses_created_by_user': courses_created_by_user,
    'profile_owner': profile_owner
    },
    context_instance=RequestContext(request))

@login_required
def view_myprofile(request):
    return view_profile(request, request.user.username)

@login_required
def add_course_mult(request):
    LessonInfoFormSet = formset_factory(LessonInfoForm, extra=2, can_order=True)
    
    if request.method == 'POST':
        course_form = CourseInfoForm(request.POST)
        lesson_fs = LessonInfoFormSet(request.POST)

        ipdb.set_trace() 
    
    else:
        course_form = CourseInfoForm()
        lesson_fs = LessonInfoFormSet() 

    return render_to_response('add_course.dtl', {
        'course_form': course_form,
        'lesson_fs': lesson_fs
    },
   context_instance=RequestContext(request))


@login_required
def add_course(request):
   if request.method == 'POST': # check if the form has been submitted
        course_form = CourseInfoForm(request.POST) # create a form that is bound to the POST data
        if course_form.is_valid(): # if the form isn't valid, we won't create the course and course_form will just be set to the bound invalid form so the errors can be displayed when it is rendered at the bottom return statement 
            cd = course_form.cleaned_data # data from the form that is "cleaned" into python-friendly format (e.g. unicode strings)
            Course.objects.create(name=cd['title'], description=cd['description'], creator=request.user.get_profile())
            # save the course in the DB
            # ......
            return HttpResponseRedirect('/myprofile/') 
        
   else:
        course_form = CourseInfoForm()

   return render_to_response('add_course.dtl', {
   'form': course_form
   },
   context_instance=RequestContext(request))
